(()=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===_typeof(c)?c:String(c)),i)}var a,c}function productAPI_typeof(t){return productAPI_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},productAPI_typeof(t)}function productAPI_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function productAPI_toPrimitive(t,r){if("object"!==productAPI_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==productAPI_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===productAPI_typeof(c)?c:String(c)),i)}var a,c}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===productAPI_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,o)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var t=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(ProductAPI,t);var r=_createSuper(ProductAPI);function ProductAPI(t,o,i){var a;return function productAPI_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,ProductAPI),(a=r.call(this,o,i)).cdn=t,a}return function productAPI_createClass(t,r,o){return r&&productAPI_defineProperties(t.prototype,r),o&&productAPI_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}(ProductAPI,[{key:"getProductItem",value:function getProductItem(t){var r=this;return this.get("/product/".concat(t)).then((function(t){return Object.assign(Object.assign({},t),{image:r.cdn+t.image})}))}},{key:"getProductList",value:function getProductList(){var t=this;return this.get("/product").then((function(r){return r.items.map((function(r){return Object.assign(Object.assign({},r),{image:t.cdn+r.image})}))}))}},{key:"orderProduct",value:function orderProduct(t){return this.post("/order",t).then((function(t){return t}))}}]),ProductAPI}(function(){function Api(t){var r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Api),this.baseUrl=t,this.options={headers:Object.assign({"Content-Type":"application/json"},null!==(r=o.headers)&&void 0!==r?r:{})}}return function _createClass(t,r,o){return r&&_defineProperties(t.prototype,r),o&&_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}(Api,[{key:"handleResponse",value:function handleResponse(t){return t.ok?t.json():t.json().then((function(r){var o;return Promise.reject(null!==(o=r.error)&&void 0!==o?o:t.statusText)}))}},{key:"get",value:function get(t){return fetch(this.baseUrl+t,Object.assign(Object.assign({},this.options),{method:"GET"})).then(this.handleResponse)}},{key:"post",value:function post(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"POST";return fetch(this.baseUrl+t,Object.assign(Object.assign({},this.options),{method:o,body:JSON.stringify(r)})).then(this.handleResponse)}}]),Api}()),r="".concat("","/api/weblarek"),o="".concat("","/content/weblarek"),i="card-catalog",a="card-preview",c="card-basket",u="basket",l="order",p="contacts",d="success",y="modal-container",m={headerBasketCounter:".header__basket-counter",gallery:".gallery",pageWrapper:".page__wrapper",headerBasket:".header__basket"};function _unsupportedIterableToArray(t,r){if(t){if("string"==typeof t)return _arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?_arrayLikeToArray(t,r):void 0}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function isSelector(t){return"string"==typeof t&&t.length>1}function ensureElement(t,r){if(isSelector(t)){var o=function ensureAllElements(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;if(isSelector(t))return Array.from(r.querySelectorAll(t));if(t instanceof NodeList)return Array.from(t);if(Array.isArray(t))return t;throw new Error("Unknown selector element")}(t,r);if(o.length>1&&console.warn("selector ".concat(t," return more then one element")),0===o.length)throw new Error("selector ".concat(t," return nothing"));return o.pop()}if(t instanceof HTMLElement)return t;throw new Error("Unknown selector element")}function cloneTemplate(t){return ensureElement(t).content.firstElementChild.cloneNode(!0)}function setElementData(t,r){for(var o in r)t.dataset[o]=String(r[o])}function createElement(t,r,o){var i,a,c=document.createElement(t);if(r)for(var u in r){var l=r[u];i=l,a=void 0,(a=Object.getPrototypeOf(i))!==Object.getPrototypeOf({})&&null!==a||"dataset"!==u?c[u]="boolean"==typeof l?l:String(l):setElementData(c,l)}if(o){var p,d=function _createForOfIteratorHelper(t,r){var o="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!o){if(Array.isArray(t)||(o=_unsupportedIterableToArray(t))||r&&t&&"number"==typeof t.length){o&&(t=o);var i=0,a=function F(){};return{s:a,n:function n(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,u=!0,l=!1;return{s:function s(){o=o.call(t)},n:function n(){var t=o.next();return u=t.done,t},e:function e(t){l=!0,c=t},f:function f(){try{u||null==o.return||o.return()}finally{if(l)throw c}}}}(Array.isArray(o)?o:[o]);try{for(d.s();!(p=d.n()).done;){var y=p.value;c.append(y)}}catch(t){d.e(t)}finally{d.f()}}return c}function events_typeof(t){return events_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},events_typeof(t)}function events_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function events_toPrimitive(t,r){if("object"!==events_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==events_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===events_typeof(c)?c:String(c)),i)}var a,c}var h=function(){function EventEmitter(){!function events_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,EventEmitter),this._events=new Map}return function events_createClass(t,r,o){return r&&events_defineProperties(t.prototype,r),o&&events_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}(EventEmitter,[{key:"on",value:function on(t,r){var o;this._events.has(t)||this._events.set(t,new Set),null===(o=this._events.get(t))||void 0===o||o.add(r)}},{key:"off",value:function off(t,r){var o;this._events.has(t)&&(this._events.get(t).delete(r),0===(null===(o=this._events.get(t))||void 0===o?void 0:o.size)&&this._events.delete(t))}},{key:"emit",value:function emit(t,r){this._events.forEach((function(o,i){(i instanceof RegExp&&i.test(t)||i===t)&&o.forEach((function(t){return t(r)}))}))}},{key:"onAll",value:function onAll(t){this.on("*",t)}},{key:"offAll",value:function offAll(){this._events=new Map}},{key:"trigger",value:function trigger(t,r){var o=this;return function(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o.emit(t,Object.assign(Object.assign({},i||{}),r||{}))}}}]),EventEmitter}();function abstract_typeof(t){return abstract_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},abstract_typeof(t)}function abstract_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function abstract_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function abstract_toPrimitive(t,r){if("object"!==abstract_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==abstract_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===abstract_typeof(c)?c:String(c)),i)}var a,c}function abstract_createClass(t,r,o){return r&&abstract_defineProperties(t.prototype,r),o&&abstract_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}var _=function(){function Component(t){abstract_classCallCheck(this,Component),this.container=t}return abstract_createClass(Component,[{key:"toggleClass",value:function toggleClass(t,r,o){t.classList.toggle(r,o)}},{key:"setText",value:function setText(t,r,o){t.textContent=String(r)+(o||"")}},{key:"setDisabled",value:function setDisabled(t,r){null==t||t.toggleAttribute("disabled",r)}},{key:"setHide",value:function setHide(t){t.style.display="none"}},{key:"setVisible",value:function setVisible(t){null==t||t.style.removeProperty("display")}},{key:"setImage",value:function setImage(t,r,o){t.src=r,t.alt=o}},{key:"render",value:function render(t){return Object.assign(this,null!=t?t:{}),this.container}}]),Component}(),b=function(){function objectModel(t,r){abstract_classCallCheck(this,objectModel),this.event=r,Object.assign(this,t)}return abstract_createClass(objectModel,[{key:"emitChanges",value:function emitChanges(t,r){this.event.emit(t,null!=r?r:{})}}]),objectModel}();function page_typeof(t){return page_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},page_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return page_arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function page_unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return page_arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return page_arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function page_arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function page_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function page_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function page_toPrimitive(t,r){if("object"!==page_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==page_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===page_typeof(c)?c:String(c)),i)}var a,c}function page_createClass(t,r,o){return r&&page_defineProperties(t.prototype,r),o&&page_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function page_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&page_setPrototypeOf(t,r)}function page_setPrototypeOf(t,r){return page_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},page_setPrototypeOf(t,r)}function page_createSuper(t){var r=function page_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=page_getPrototypeOf(t);if(r){var a=page_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return function page_possibleConstructorReturn(t,r){if(r&&("object"===page_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function page_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,o)}}function page_getPrototypeOf(t){return page_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},page_getPrototypeOf(t)}var v=function(t){page_inherits(Page,t);var r=page_createSuper(Page);function Page(t,o){var i;page_classCallCheck(this,Page),(i=r.call(this,t)).events=o;var a=function getElement(t){return ensureElement(t,i.container)};return i._counter=a(m.headerBasketCounter),i._catalogue=a(m.gallery),i._wrapper=a(m.pageWrapper),i._basket=a(m.headerBasket),i._basket.addEventListener("click",(function(){return i.events.emit("basket:open")})),i}return page_createClass(Page,[{key:"counter",set:function set(t){this.setText(this._counter,String(t))}},{key:"catalogue",set:function set(t){var r;(r=this._catalogue).replaceChildren.apply(r,_toConsumableArray(t))}},{key:"locked",set:function set(t){this.toggleClass(this._wrapper,"page__wrapper_locked",t)}}]),Page}(_),g=function(t){page_inherits(State,t);var r=page_createSuper(State);function State(){var t;return page_classCallCheck(this,State),(t=r.apply(this,arguments)).order={email:"",phone:"",address:"",payment:"",total:null,items:[]},t.formOrderErrors={},t.formContactsErrors={},t}return page_createClass(State,[{key:"toggleOrderItem",value:function toggleOrderItem(t,r){this.order.items=r?_toConsumableArray(new Set([].concat(_toConsumableArray(this.order.items),[t]))):this.order.items.filter((function(r){return r!==t}))}},{key:"clearBasket",value:function clearBasket(){var t=this;this.order.items.forEach((function(r){return t.toggleOrderItem(r,!1)})),this.clearOrderFields(),this.emitChanges("basket:changed",{order:this.order})}},{key:"total",value:function total(){var t=this;return this.order.total=this.order.items.reduce((function(r,o){var i;return r+Number((null===(i=t.catalogue.find((function(t){return t.id===o})))||void 0===i?void 0:i.price)||0)}),0)}},{key:"setCatalogue",value:function setCatalogue(t){this.catalogue=t,this.emitChanges("items:changed",{catalogue:this.catalogue})}},{key:"getCards",value:function getCards(){var t=this;return this.catalogue.filter((function(r){return t.order.items.includes(r.id)}))}},{key:"isFilledFieldsOrder",value:function isFilledFieldsOrder(){return!!this.order.address&&!!this.order.payment}},{key:"isFilledFieldsContacts",value:function isFilledFieldsContacts(){return!!this.order.email&&!!this.order.phone}},{key:"clearOrderFields",value:function clearOrderFields(){this.order.email="",this.order.address="",this.order.payment="",this.order.phone=""}},{key:"setField",value:function setField(t,r){this.order[t]=r,["address","payment"].includes(t)&&this.validateOrder(),["email","phone"].includes(t)&&this.validateContacts()}},{key:"validateOrder",value:function validateOrder(){var t={};return this.order.address||(t.address="Необходимо указать адрес"),this.order.payment||(t.payment="Необходимо указать способ оплаты"),this.formOrderErrors=t,this.event.emit("formOrderErrors:change",this.formOrderErrors),0===Object.keys(t).length}},{key:"validateContacts",value:function validateContacts(){var t={};return this.order.email||(t.email="Необходимо указать email"),this.order.phone||(t.phone="Необходимо указать телефон"),this.formContactsErrors=t,this.event.emit("formContactsErrors:change",this.formContactsErrors),0===Object.keys(t).length}}]),State}(b),k=function(t){page_inherits(Card,t);var r=page_createSuper(Card);function Card(t,o,i){var a;page_classCallCheck(this,Card),(a=r.call(this,o)).blockName=t;var c=function getElement(t){return ensureElement(t,o)};return a._title=c(".".concat(t,"__title")),a._image=o.querySelector(".".concat(t,"__image")),a._price=c(".".concat(t,"__price")),a._category=o.querySelector(".".concat(t,"__category")),a._buttonModal=o.querySelector(".".concat(t,"__button")),a._description=o.querySelector(".".concat(t,"__text")),(null==i?void 0:i.onClick)&&(a._buttonModal?(a._buttonModal.textContent="Купить",a._buttonModal.addEventListener("click",i.onClick)):o.addEventListener("click",i.onClick)),a}return page_createClass(Card,[{key:"isEmpty",value:function isEmpty(t){return t?this.setText(this._buttonModal,"В корзину"):this.setText(this._buttonModal,"Купить")}},{key:"id",get:function get(){return this.container.dataset.id||""},set:function set(t){this.container.dataset.id=t}},{key:"title",get:function get(){return this._title.textContent||""},set:function set(t){this.setText(this._title,t)}},{key:"image",set:function set(t){this.setText(this._image,t)}},{key:"price",set:function set(t){this.setText(this._price,t+" синапсов"),t||(this._price.textContent="",this.setDisabled(this._buttonModal,!0))}},{key:"category",set:function set(t){var r=function bem(t,r,o){var i=t;return r&&(i+="__".concat(r)),o&&(i+="_".concat(o)),{name:i,class:".".concat(i)}}(this.blockName,"category",{"софт-скил":"soft","хард-скил":"hard",кнопка:"button",другое:"other",дополнительное:"additional"}[t]).name;this.setText(this._category,t),this.toggleClass(this._category,r,!0)}},{key:"description",set:function set(t){var r,o,i=this;Array.isArray(t)&&(null===(r=this._description)||void 0===r||(o=r).replaceWith.apply(o,_toConsumableArray(t.map((function(t){var r,o=null===(r=i._description)||void 0===r?void 0:r.cloneNode(!0);return i.setText(o,t),o})))))}}]),Card}(_);function popup_typeof(t){return popup_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},popup_typeof(t)}function popup_toConsumableArray(t){return function popup_arrayWithoutHoles(t){if(Array.isArray(t))return popup_arrayLikeToArray(t)}(t)||function popup_iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function popup_unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return popup_arrayLikeToArray(t,r);var o=Object.prototype.toString.call(t).slice(8,-1);"Object"===o&&t.constructor&&(o=t.constructor.name);if("Map"===o||"Set"===o)return Array.from(t);if("Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o))return popup_arrayLikeToArray(t,r)}(t)||function popup_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function popup_arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var o=0,i=new Array(r);o<r;o++)i[o]=t[o];return i}function popup_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function popup_defineProperties(t,r){for(var o=0;o<r.length;o++){var i=r[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(a=i.key,c=void 0,c=function popup_toPrimitive(t,r){if("object"!==popup_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var i=o.call(t,r||"default");if("object"!==popup_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===popup_typeof(c)?c:String(c)),i)}var a,c}function popup_createClass(t,r,o){return r&&popup_defineProperties(t.prototype,r),o&&popup_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function _get(t,r,o){var i=function _superPropBase(t,r){for(;!Object.prototype.hasOwnProperty.call(t,r)&&null!==(t=popup_getPrototypeOf(t)););return t}(t,r);if(i){var a=Object.getOwnPropertyDescriptor(i,r);return a.get?a.get.call(arguments.length<3?t:o):a.value}},_get.apply(this,arguments)}function popup_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&popup_setPrototypeOf(t,r)}function popup_setPrototypeOf(t,r){return popup_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},popup_setPrototypeOf(t,r)}function popup_createSuper(t){var r=function popup_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var o,i=popup_getPrototypeOf(t);if(r){var a=popup_getPrototypeOf(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return function popup_possibleConstructorReturn(t,r){if(r&&("object"===popup_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return popup_assertThisInitialized(t)}(this,o)}}function popup_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function popup_getPrototypeOf(t){return popup_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},popup_getPrototypeOf(t)}var __rest=function(t,r){var o={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&r.indexOf(i)<0&&(o[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(i=Object.getOwnPropertySymbols(t);a<i.length;a++)r.indexOf(i[a])<0&&Object.prototype.propertyIsEnumerable.call(t,i[a])&&(o[i[a]]=t[i[a]])}return o},C=function(t){popup_inherits(PopupComponent,t);var r=popup_createSuper(PopupComponent);function PopupComponent(t,o){var i;return popup_classCallCheck(this,PopupComponent),(i=r.call(this,t)).events=o,i._closeBtn=ensureElement(".modal__close",i.container),i._content=ensureElement(".modal__content",i.container),i._closeBtn.addEventListener("click",i.close.bind(popup_assertThisInitialized(i))),i.container.addEventListener("click",i.close.bind(popup_assertThisInitialized(i))),i._content.addEventListener("click",(function(t){return t.stopPropagation()})),i}return popup_createClass(PopupComponent,[{key:"content",set:function set(t){this._content.replaceChildren(t)}},{key:"open",value:function open(){this.container.classList.add("modal_active"),this.events.emit("modal:open")}},{key:"close",value:function close(){this.container.classList.remove("modal_active"),this.content=null,this.events.emit("modal:close")}},{key:"render",value:function render(t){return _get(popup_getPrototypeOf(PopupComponent.prototype),"render",this).call(this,t),this.open(),this.container}}]),PopupComponent}(_),P=function(t){popup_inherits(Basket,t);var r=popup_createSuper(Basket);function Basket(t,o){var i;return popup_classCallCheck(this,Basket),(i=r.call(this,t)).events=o,i._list=ensureElement(".basket__list",i.container),i._total=i.container.querySelector(".basket__price"),i._button=i.container.querySelector(".basket__button"),i._button.addEventListener("click",(function(){o.emit("order:open")})),i.items=[],i}return popup_createClass(Basket,[{key:"items",get:function get(){return 0===this._list.childElementCount?[createElement("p",{textContent:"Корзина пуста"})]:Array.from(this._list.children)},set:function set(t){var r;t.length?(r=this._list).replaceChildren.apply(r,popup_toConsumableArray(t)):this._list.replaceChildren(createElement("p",{textContent:"Корзина пуста"}))}},{key:"selected",set:function set(t){t.length?this.setDisabled(this._button,!1):this.setDisabled(this._button,!0)}},{key:"total",set:function set(t){this.setText(this._total,t+" синапсов")}}]),Basket}(_),O=function(t){popup_inherits(Form,t);var r=popup_createSuper(Form);function Form(t,o){var i;return popup_classCallCheck(this,Form),(i=r.call(this,t)).container=t,i.events=o,i._errors=ensureElement(".form__errors",i.container),i.container.addEventListener("input",(function(t){var r=t.target,o=r.name,a=r.value;i.onInputChange(o,a)})),i}return popup_createClass(Form,[{key:"onInputChange",value:function onInputChange(t,r){this.events.emit("order:change",{field:t,value:r})}},{key:"onPaymentChange",value:function onPaymentChange(t){console.log("Payment method changed:",t),this.events.emit("order:change",{field:"payment",value:t})}},{key:"errors",set:function set(t){this.setText(this._errors,t)}},{key:"render",value:function render(t){var r=t.validation,o=t.errors,i=__rest(t,["validation","errors"]);return _get(popup_getPrototypeOf(Form.prototype),"render",this).call(this,{validation:r,errors:o}),Object.assign(this,i),this.container}}]),Form}(_),S=function(t){popup_inherits(Contact,t);var r=popup_createSuper(Contact);function Contact(t,o){var i;return popup_classCallCheck(this,Contact),(i=r.call(this,t,o))._submit=ensureElement("button[type=submit]",i.container),i.container.addEventListener("submit",(function(t){t.preventDefault(),i.events.emit("order:submit")})),i}return popup_createClass(Contact,[{key:"valid",set:function set(t){this._submit.disabled=!t}},{key:"phone",set:function set(t){this.container.elements.namedItem("phone").value=t}},{key:"email",set:function set(t){this.container.elements.namedItem("email").value=t}}]),Contact}(O),w=function(t){popup_inherits(Order,t);var r=popup_createSuper(Order);function Order(t,o){var i;return popup_classCallCheck(this,Order),(i=r.call(this,t,o))._submit=ensureElement("button[type=submit]",i.container),i._btn=t.querySelector("[name=cash]"),i._btnCard=t.querySelector("[name=card]"),i._btn&&i._btn.addEventListener("click",(function(){console.log("Button clicked - offline"),i.onPaymentChange("offline"),i._btn.classList.add("button_alt-active"),i._btnCard&&i._btnCard.classList.remove("button_alt-active")})),i._btnCard&&i._btnCard.addEventListener("click",(function(){console.log("Button clicked - online"),i.onPaymentChange("online"),i._btnCard.classList.add("button_alt-active"),i._btn&&i._btn.classList.remove("button_alt-active")})),i.container.addEventListener("submit",(function(t){t.preventDefault(),i.events.emit("contacts:open")})),i}return popup_createClass(Order,[{key:"valid",set:function set(t){this._submit.disabled=!t}},{key:"address",set:function set(t){this.container.elements.namedItem("address").value=t}}]),Order}(O),E=function(t){popup_inherits(BasketItem,t);var r=popup_createSuper(BasketItem);function BasketItem(t,o){var i;return popup_classCallCheck(this,BasketItem),(i=r.call(this,"card",t))._index=t.querySelector(".basket__item-index"),i._btn=t.querySelector(".basket__item-delete"),i._btn.addEventListener("click",o.onClick),i}return popup_createClass(BasketItem,[{key:"index",set:function set(t){this.setText(this._index,t)}}]),BasketItem}(k),j=function(t){popup_inherits(Success,t);var r=popup_createSuper(Success);function Success(t,o){var i;return popup_classCallCheck(this,Success),(i=r.call(this,t))._total=ensureElement(".order-success__description",i.container),i._close=ensureElement(".button",i.container),i._close.addEventListener("click",o.onClick),i}return popup_createClass(Success,[{key:"total",set:function set(t){var r=1===t?"синапс":"синапсов";this.setText(this._total,"Списано ".concat(t," ").concat(r))}}]),Success}(_),A=new t(o,r),T=new h,I=ensureElement("#".concat(i)),x=ensureElement("#".concat(a)),L=ensureElement("#".concat(u)),R=ensureElement("#".concat(c)),B=ensureElement("#".concat(l)),M=ensureElement("#".concat(p)),N=ensureElement("#".concat(d)),D=new g({},T),q=new v(document.body,T),U=new C(ensureElement("#".concat(y)),T),z=new P(cloneTemplate(L),T),H=new w(cloneTemplate(B),T),W=new S(cloneTemplate(M),T);T.on("basket:open",(function(){console.log("Event basket:open was handled"),U.render({content:z.render()})})),console.log("CDN_URL:",o),console.log("API_URL:",r),console.log("Basket Render Content:",z.render()),T.on("items:changed",(function(){console.log("Items changed event triggered"),console.log("Current state catalogue:",D.catalogue),q.catalogue=D.catalogue.map((function(t){return new k("card",cloneTemplate(I),{onClick:function onClick(){T.emit("card:select",t)}}).render({id:t.id,title:t.title,image:t.image,price:t.price,category:t.category})}))})),T.on("basket:changed",(function(){z.items=D.getCards().map((function(t,r){var o=new E(cloneTemplate(R),{onClick:function onClick(){D.toggleOrderItem(t.id,!1),q.counter=D.order.items.length,z.items=z.items.filter((function(r){return r.dataset.id!==t.id})),z.total=D.total(),z.selected=D.order.items}});return o.render({id:t.id,title:t.title,price:t.price,index:r+1})})),q.counter=D.order.items.length,z.total=D.total(),z.selected=D.order.items})),T.on("card:select",(function(t){t?(console.log("item"+t),A.getProductItem(t.id).then((function(r){var o=new k("card",cloneTemplate(x),{onClick:function onClick(o){var i=o.target;"Купить"===i.textContent?(i.textContent="В корзину",D.toggleOrderItem(r.id,!0),q.counter=D.order.items.length,T.emit("basket:changed")):"В корзину"===i.textContent&&T.emit("basket:open",t)}});o.isEmpty(D.order.items.includes(r.id)),U.render({content:o.render({title:r.title,image:r.image,description:r.description,price:r.price,category:r.category})})})).catch((function(r){console.error("theres not item: "+t),console.error("theres more long "+r)}))):U.close()})),T.on("order:open",(function(){U.render({content:H.render({address:D.order.address,validation:D.isFilledFieldsOrder(),errors:[]})})})),T.on("contacts:open",(function(){U.render({content:W.render({email:D.order.email,phone:D.order.phone,validation:D.isFilledFieldsContacts(),errors:[]})})})),T.on("formOrderErrors:change",(function(t){var r=t.address,o=t.payment;H.valid=!r&&!o,H.errors=Object.values({address:r,payment:o}).filter((function(t){return!!t})).join("; ")})),T.on("formContactsErrors:change",(function(t){var r=t.email,o=t.phone;W.valid=!r&&!o,W.errors=Object.values({email:r,phone:o}).filter((function(t){return!!t})).join("; ")})),T.on("modal:open",(function(){q.locked=!0})),T.on("modal:close",(function(){q.locked=!1})),T.on("order:submit",(function(){A.orderProduct(D.order).then((function(t){D.clearBasket();var r=new j(cloneTemplate(N),{onClick:function onClick(){U.close()}});U.render({content:r.render({total:t.total})})})).catch((function(t){console.error(t)}))})),T.on("order:change",(function(t){console.log("shto takoe data"+t.value),D.setField(t.field,t.value)})),A.getProductList().then(D.setCatalogue.bind(D)).catch((function(t){console.error(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,